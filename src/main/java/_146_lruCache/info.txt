说明：
	* LRU 缓存，存储空间有限，当存满的时候，需要进行淘汰；
	* LRU 选择删除最远一次操作过的元素，操作包括get 和 put
	* 最开始put 进去的如果没有进行过get，那存满的时候就需要删掉它

思路分析：

	* 看到 O(1) 的时间复杂度的，首先想到的就是用 HashMap 去存储；
	* 当存满的时候，需要删除最远一次操作过的元素
		* 可以用一个链表，每put 一个元素的时候，就把他加到链表尾部
		* 如果get 某个元素，就把这个元素移动到链表尾部
		* 当存满的时候，就把链表头的元素删除
	* 当移动某个元素的时候，可以通过map 直接得到这个元素；但对于链表，想移动一个元素，必须得知道它的前一个节点；
		* 而找到前一个元素，最直接的方法就是遍历一遍；这就使得算法复杂度不是O(1)
		* 使用双向链表，就可以直接得到前一个元素，从而实现移动操作

综上：HashMap + 双向链表即可